import numpy as np

# =================================================================
# 배열 생성
# np.arange : 1차원 배열
# =================================================================

v1 = np.array([1,2,3,4])
print(v1)

# 연속되거나 일정한 규칙을 가진 숫자
v1 = np.arange(5)
print(v1)          # [0 1 2 3 4]

# 데이터 형태 지정
v2 = np.arange(1, 10, 2, dtype=int)
print(v2)          # [1 3 5 7 9]

v3 = np.arange(3.5, 10.5, 2, dtype=float)
print(v3)          # [3.5 5.5 7.5 9.5]

# 제곱값
v4 = np.arange(1, 10, 2)**2
print(v4)          # [1  9 25 49 81]

# 세제곱값
v5 = np.arange(1, 10, 2)**3
print(v5)          # [1  27 125 343 729]


# =================================================================
# 행렬 생성
# np.reshape(차원, 행, 렬, order='C' or 'F')
# order = 'C' : 값을 행부터 채워 넣음 (default)
# order = 'F' : 값을 열부터 채워 넣음
# =================================================================

v1 = np.arange(12)
print(v1)
# [ 0  1  2  3  4  5  6  7  8  9 10 11]

v2 = v1.reshape(2, 6)
print(v2)
# [[ 0  1  2  3  4  5]
#  [ 6  7  8  9 10 11]]

v3 = v1.reshape(2, 6, order='F')
print(v3)
# [[ 0  2  4  6  8 10]
#  [ 1  3  5  7  9 11]]

# 행렬의 연산 ------------------------------------------------------
# np.add (변수명, 변수명)
# np.subtract(변수명, 변수명)
# np.multiply(변수명, 변수명)
# np.dot(변수명, 변수명) : 행렬의 연산

v1 = np.arange(1,5).reshape(2,2)
print(v1)
# [[1 2]
#  [3 4]]

print(np.add(v1, v1))
# [[2 4]
#  [6 8]]

print(np.subtract(v1, v1))
# [[0 0]
#  [0 0]]

print(np.multiply(v1, v1))
# [[ 1  4]
#  [ 9 16]]

print(np.dot(v1, v1))
# [[ 7 10]
#  [15 22]]

# 다차원 배열 만들기 -----------------------------------------------
# 다차원 배열은 직접 눈으로 데이터를 일일이 확인하기 어려운 경우가 많음
# 최대값, 최소값 : np.amax(변수명), np.amin(변수명)
# 데이터 타입 : 변수명.dtype
# 행, 열, 차원 확인 : 변수명.shape

v1 = np.arange(12).reshape(2,3,2,order='F')
print(v1)

# [[[ 0  6]
#   [ 2  8]
#   [ 4 10]]
#
#  [[ 1  7]
#   [ 3  9]
#   [ 5 11]]]

v2 = np.arange(3.5, 10.5, 2, dtype=float)
print(v2)
# [3.5 5.5 7.5 9.5]

v3 = np.arange(1,5).reshape(2,2)
print(v3)
# [[1 2]
#  [3 4]]

print(np.amax(v3))  # 4
print(np.amin(v4))  # 1
print(v2.dtype)     # float64
print(v3.shape)     # (2, 2)

